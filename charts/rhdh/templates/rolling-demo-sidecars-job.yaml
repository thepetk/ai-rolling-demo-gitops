apiVersion: batch/v1
kind: Job
metadata:
  name: update-deployment-containers
  annotations:
    argocd.argoproj.io/hook: PostSync
spec:
  template:
    spec:
      containers:
        - name: patch-deployment
          image: quay.io/redhat-ai-dev/utils:latest
          command: ["/bin/bash", "-c"]
          args:
            - |
              DEPLOYMENT="rolling-demo-backstage"
              NAMESPACE="rolling-demo-ns"

              echo "Waiting deployment ${DEPLOYMENT} to be available.."
              kubectl rollout status deployment/$DEPLOYMENT -n $NAMESPACE --timeout=600s

              echo "Checking if containers already exist in deployment..."
              CONTAINERS=$(kubectl get deployment $DEPLOYMENT -n $NAMESPACE -o json | jq '.spec.template.spec.containers[] | .name')

              # Create temp dir and files
              TEMP_DIR=$(mktemp -d)
              PATCH_FILE="${TEMP_DIR}/patch.json"

               # Create temp dir and files
              TEMP_DIR=$(mktemp -d)
              PATCH_FILE="${TEMP_DIR}/patch.json"

              # Create the container definition files
              cat > "${TEMP_DIR}/location.json" <<EOF
              {
                "name": "location",
                "env": [
                  { "name": "NORMALIZER_FORMAT", "value": "JsonArrayFormat" },
                  { "name": "POD_IP", "valueFrom": { "fieldRef": { "fieldPath": "status.podIP" } } },
                  { "name": "POD_NAMESPACE", "valueFrom": { "fieldRef": { "fieldPath": "metadata.namespace" } } }
                ],
                "envFrom": [
                  { "secretRef": { "name": "rhdh-rhoai-bridge-token" } },
                  { "secretRef": { "name": "ai-rh-developer-hub-env" } }
                ],
                "image": "quay.io/redhat-ai-dev/model-catalog-location-service:latest",
                "imagePullPolicy": "Always",
                "ports": [{ "containerPort": 9090, "name": "location", "protocol": "TCP" }],
                "startupProbe": {
                  "httpGet": { "path": "/.backstage/health/v1/liveness", "port": 7007, "scheme": "HTTP" },
                  "initialDelaySeconds": 30,
                  "timeoutSeconds": 4,
                  "periodSeconds": 20,
                  "successThreshold": 1,
                  "failureThreshold": 3
                },
                "volumeMounts": [{ "mountPath": "/opt/app-root/src/dynamic-plugins-root", "name": "dynamic-plugins-root" }],
                "workingDir": "/opt/app-root/src"
              }
              EOF

              cat > "${TEMP_DIR}/storage-rest.json" <<EOF
              {
                "name": "storage-rest",
                "env": [
                  { "name": "NORMALIZER_FORMAT", "value": "JsonArrayFormat" },
                  { "name": "STORAGE_TYPE", "value": "ConfigMap" },
                  { "name": "PUSH_TO_RHDH", "value": "False"},
                  { "name": "POD_IP", "valueFrom": { "fieldRef": { "fieldPath": "status.podIP" } } },
                  { "name": "POD_NAMESPACE", "valueFrom": { "fieldRef": { "fieldPath": "metadata.namespace" } } }
                ],
                "envFrom": [
                  { "secretRef": { "name": "rhdh-rhoai-bridge-token" } },
                  { "secretRef": { "name": "ai-rh-developer-hub-env" } }
                ],
                "image": "quay.io/redhat-ai-dev/model-catalog-storage-rest:latest",
                "imagePullPolicy": "Always",
                "volumeMounts": [{ "mountPath": "/opt/app-root/src/dynamic-plugins-root", "name": "dynamic-plugins-root" }],
                "workingDir": "/opt/app-root/src"
              }
              EOF

              cat > "${TEMP_DIR}/rhoai-normalizer.json" <<EOF
              {
                "name": "rhoai-normalizer",
                "args": [
                   "-metrics-address=:8888",
                   "-zap-log-level=6",
                   "-v=6"
                ],
                "env": [
                  { "name": "NORMALIZER_FORMAT", "value": "JsonArrayFormat" },
                  { "name": "POLLING_INTERVAL", "value": "10s"},
                  { "name": "POD_IP", "valueFrom": { "fieldRef": { "fieldPath": "status.podIP" } } },
                  { "name": "POD_NAMESPACE", "valueFrom": { "fieldRef": { "fieldPath": "metadata.namespace" } } }
                ],
                "envFrom": [
                  { "secretRef": { "name": "rhdh-rhoai-bridge-token" } },
                  { "secretRef": { "name": "ai-rh-developer-hub-env" } }
                ],
                "image": "quay.io/redhat-ai-dev/model-catalog-rhoai-normalizer:latest",
                "imagePullPolicy": "Always",
                "volumeMounts": [{ "mountPath": "/opt/app-root/src/dynamic-plugins-root", "name": "dynamic-plugins-root" }],
                "workingDir": "/opt/app-root/src"
              }
              EOF

              cat > "${TEMP_DIR}/llama-stack-sidecar.json" <<EOF
              {
                "name": "llama-stack",
                "envFrom": [
                  { "secretRef": { "name": "llama-stack-secrets" } }
                ],
                "image": "quay.io/lightspeed-core/lightspeed-stack:dev-20251021-ee9f08f",
                "imagePullPolicy": "Always",
                "volumeMounts": [
                  { "mountPath": "/app-root/.llama", "name": "shared-storage" },
                  { "mountPath": "/app-root/embeddings_model", "name": "rag-data-volume", "subPath": "embeddings_model" },
                  { "mountPath": "/app-root/vector_db/rhdh_product_docs", "name": "rag-data-volume", "subPath": "rhdh_product_docs" }
                ]
              }
              EOF

              cat > "${TEMP_DIR}/lightspeed-core-sidecar.json" <<EOF
              {
                "name": "lightspeed-core",
                "image": "quay.io/lightspeed-core/lightspeed-stack:latest",
                "imagePullPolicy": "Always",
                "ports": [{ "containerPort": 8080, "name": "lcs-backend", "protocol": "TCP" }],
                "volumeMounts": [
                  { "mountPath": "/app-root/lightspeed-stack.yaml", "name": "lightspeed-stack", "subPath": "lightspeed-stack.yaml" },
                  { "mountPath": "/tmp/data/feedback", "name": "shared-storage" }
                ]
              }
              EOF

              cat > "${TEMP_DIR}/feedback-harvester-sidecar.json" <<EOF
              {
                "name": "feedback-harvester",
                "env": [
                  { "name": "PGUSER", "valueFrom": { "secretKeyRef": { "name": "lightspeed-postgres-info", "key": "user" } } },
                  { "name": "PGPASSWORD", "valueFrom": { "secretKeyRef": { "name": "lightspeed-postgres-info", "key": "password" } } },
                  { "name": "PGDATABASE", "valueFrom": { "secretKeyRef": { "name": "lightspeed-postgres-info", "key": "db-name" } } },
                  { "name": "PGHOST", "value": "lightspeed-postgres-svc.lightspeed-postgres.svc.cluster.local" },
                  { "name": "PGPORT", "value": "5432" },
                  { "name": "FEEDBACK_DIRECTORY", "value": "/tmp/data/feedback" },
                  { "name": "FETCH_FREQUENCY", "value": "60" }
                ],
                "image": "quay.io/redhat-ai-dev/feedback-harvester:v0.1.0",
                "volumeMounts": [
                  { "mountPath": "/tmp/data/feedback", "name": "shared-storage" }
                ]
              }
              EOF

              # build the file used for patching
              echo "[" > "$PATCH_FILE"

              add_patch_operation() {
                local operation=$1
                local path=$2
                local json_file=$3
                local is_last=$4

                echo "  {" >> "$PATCH_FILE"
                echo "    \"op\": \"$operation\"," >> "$PATCH_FILE"

                # Only add value field if it's not a remove operation
                if [ "$operation" != "remove" ]; then
                  echo "    \"path\": \"$path\"," >> "$PATCH_FILE"
                  echo "    \"value\": $(cat $json_file)" >> "$PATCH_FILE"
                else
                  echo "    \"path\": \"$path\"" >> "$PATCH_FILE"
                fi

                if [ "$is_last" = "true" ]; then
                  echo "  }" >> "$PATCH_FILE"
                else
                  echo "  }," >> "$PATCH_FILE"
                fi
              }

              # check action for each one of the containers
              # Location: Add/Replace
              if echo "$CONTAINERS" | grep -q '"location"'; then
                echo "Container 'location' already exists, will replace..."
                LOCATION_INDEX=$(kubectl get deployment $DEPLOYMENT -n $NAMESPACE -o json | jq '.spec.template.spec.containers | map(.name == "location") | index(true)')
                add_patch_operation "replace" "/spec/template/spec/containers/$LOCATION_INDEX" "${TEMP_DIR}/location.json" "false"
              else
                echo "Container 'location' does not exist, will add..."
                add_patch_operation "add" "/spec/template/spec/containers/-" "${TEMP_DIR}/location.json" "false"
              fi

              # Storage REST: Add/Replace
              if echo "$CONTAINERS" | grep -q '"storage-rest"'; then
                echo "Container 'storage-rest' already exists, will replace..."
                STORAGE_REST_INDEX=$(kubectl get deployment $DEPLOYMENT -n $NAMESPACE -o json | jq '.spec.template.spec.containers | map(.name == "storage-rest") | index(true)')
                add_patch_operation "replace" "/spec/template/spec/containers/$STORAGE_REST_INDEX" "${TEMP_DIR}/storage-rest.json" "false"
              else
                echo "Container 'storage-rest' does not exist, will add..."
                add_patch_operation "add" "/spec/template/spec/containers/-" "${TEMP_DIR}/storage-rest.json" "false"
              fi

              # RHOAI Normalizer: Add/Replace
              if echo "$CONTAINERS" | grep -q '"rhoai-normalizer"'; then
                echo "Container 'rhoai-normalizer' already exists, will replace..."
                RHOAI_NORMALIZER_INDEX=$(kubectl get deployment $DEPLOYMENT -n $NAMESPACE -o json | jq '.spec.template.spec.containers | map(.name == "rhoai-normalizer") | index(true)')
                add_patch_operation "replace" "/spec/template/spec/containers/$RHOAI_NORMALIZER_INDEX" "${TEMP_DIR}/rhoai-normalizer.json" "false"
              else
                echo "Container 'rhoai-normalizer' does not exist, will add..."
                add_patch_operation "add" "/spec/template/spec/containers/-" "${TEMP_DIR}/rhoai-normalizer.json" "false"
              fi

              # Lightspeed Core: Add/Replace
              if echo "$CONTAINERS" | grep -q '"lightspeed-core"'; then
                echo "Container 'lightspeed-core' already exists, will replace..."
                LIGHTSPEED_CORE_INDEX=$(kubectl get deployment $DEPLOYMENT -n $NAMESPACE -o json | jq '.spec.template.spec.containers | map(.name == "lightspeed-core") | index(true)')
                add_patch_operation "replace" "/spec/template/spec/containers/$LIGHTSPEED_CORE_INDEX" "${TEMP_DIR}/lightspeed-core-sidecar.json" "false"
              else
                echo "Container 'lightspeed-core' does not exist, will add..."
                add_patch_operation "add" "/spec/template/spec/containers/-" "${TEMP_DIR}/lightspeed-core-sidecar.json" "false"
              fi

              # Feedback Harvester: Add/Replace
              if echo "$CONTAINERS" | grep -q '"feedback-harvester"'; then
                echo "Container 'feedback-harvester' already exists, will replace..."
                FEEDBACK_HARVESTER_INDEX=$(kubectl get deployment $DEPLOYMENT -n $NAMESPACE -o json | jq '.spec.template.spec.containers | map(.name == "feedback-harvester") | index(true)')
                add_patch_operation "replace" "/spec/template/spec/containers/$FEEDBACK_HARVESTER_INDEX" "${TEMP_DIR}/feedback-harvester-sidecar.json" "false"
              else
                echo "Container 'feedback-harvester' does not exist, will add..."
                add_patch_operation "add" "/spec/template/spec/containers/-" "${TEMP_DIR}/feedback-harvester-sidecar.json" "false"
              fi

              # Llama Stack: Add/Replace
              if echo "$CONTAINERS" | grep -q '"llama-stack"'; then
                echo "Container 'llama-stack' already exists, will replace..."
                LLAMA_STACK_INDEX=$(kubectl get deployment $DEPLOYMENT -n $NAMESPACE -o json | jq '.spec.template.spec.containers | map(.name == "llama-stack") | index(true)')
                add_patch_operation "replace" "/spec/template/spec/containers/$LLAMA_STACK_INDEX" "${TEMP_DIR}/llama-stack-sidecar.json" "true"
              else
                echo "Container 'llama-stack' does not exist, will add..."
                add_patch_operation "add" "/spec/template/spec/containers/-" "${TEMP_DIR}/llama-stack-sidecar.json" "true"
              fi

              echo "]" >> "$PATCH_FILE"

              echo "Applied in detail:"
              cat "$PATCH_FILE" | jq '.'

              echo "Patching ${DEPLOYMENT} .."
              kubectl patch deployment $DEPLOYMENT -n $NAMESPACE --type='json' --patch="$(cat $PATCH_FILE)"
      restartPolicy: OnFailure
  backoffLimit: 4
